#!/bin/bash

# (C) Copyright 2020-2020 UCAR
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.

set -e

cat << EOF

#================================================================================
#================================================================================
# prep.bkg.ens.sh
#   Prepare an ensemble of background restart file. Either by linking from a
#   previous cycle in the current experiment, from an external BKRST_ENS_DIR,
#   or by perturbing the central member in BKGRST_DIR
#================================================================================

EOF

# Required environment variables:
envars=()
envars+=("DATE")
envars+=("BKGRST_COLDSTART_ENABLED")
envars+=("BKGRST_DIR")
envars+=("BKGRST_ENS_DIR")
envars+=("DA_ENS_SIZE")
envars+=("DA_SEAICE_ENABLED")
envars+=("DA_WAV_ENABLED")
envars+=("DA_VARIABLES")
envars+=("DA_VARIABLES_OCN")
envars+=("DA_VARIABLES_ICE")
envars+=("DA_MODE")
envars+=("SOCA_BIN_DIR")
envars+=("SOCA_DEFAULT_CFGS_DIR")
envars+=("SOCA_STATIC_DIR")
envars+=("WORK_DIR")

# make sure required env vars exist
set +u
for v in ${envars[@]}; do
    if [[ -z "${!v}" ]]; then
        echo "ERROR: env var $v is not set."; exit 1
    fi
    printf "%-25s %s\n" " $v " "${!v}"
done
set -u
echo ""

# 1) Does a background already exist? If so exit early
# TODO, check to make sure it is actually populated with files?
found=1
for ens in $(seq -f "%03g" $DA_ENS_SIZE ); do
    [[ ! -d "$BKGRST_ENS_DIR/$ens" ]] && found=0
done
if [[ "$found" == 1 ]]; then
    echo "Background ensemble already exists."
    exit 0
fi


# 2) otherwise, search the $BKG_SRC_DIR list and find first available background
# to link to
# TODO

# 3) otherwise, create a perturbed ensemble generated by randomizing the static B
if [[ "$BKGRST_COLDSTART_ENABLED" =~ [yYtT1] ]]; then
    echo "Generating a perturbed ensemble from the coldstart..."
    # TODO, move this all to a function in the model script

    ln -s $SOCA_BIN_DIR/soca_{enspert,checkpoint_model}.x .
    cp $SOCA_DEFAULT_CFGS_DIR/{fields_metadata,soca_enspert,soca_checkpoint}.yaml .

    # Set domain and variables
    domains='ocn'
    if [[ "$DA_SEAICE_ENABLED" =~ [yYtT1] ]]; then
      domains='ocn_ice'
    fi
    if [[ "$DA_WAV_ENABLED" =~ [yYtT1] ]]; then
      domains='ocn_wav'
    fi
    # TODO move this to utility function ... or not.
    sed -i "s;__DOMAINS__;$domains;g" soca_checkpoint.yaml
    sed -i "s;__DA_VARIABLES__;$DA_VARIABLES;g" soca_checkpoint.yaml

    ln -s $MODEL_CFG_DIR/* .
    export FCST_RESTART=1
    export FCST_START_TIME=$DATE
    export FCST_RST_OFST=24
    . input.nml.sh > mom_input.nml
    mkdir -p OUTPUT RESTART
    mkdir -p INPUT
    (cd INPUT && ln -sf $MODEL_DATA_DIR/* .)
    ln -s $BKGRST_DIR RESTART_IN
    ln -s $MODEL_DATA_DIR/../soca/* . #TODO use a proper path
    mkdir -p FORC
    (cd FORC && ln -sf $FORC_DIR/atm_* atm.nc )
    ln -s $SOCA_STATIC_DIR/* .
    mkdir -p Data

    # Randomize B and add the ens of increments to the background
    sed -i "s/\#DA_ENS_SIZE\#/$DA_ENS_SIZE/g" soca_enspert.yaml
    sed -i "s;__DOMAINS__;$domains;g" soca_enspert.yaml
    sed -i "s;__DA_VARIABLES__;$DA_VARIABLES;g" soca_enspert.yaml
    sed -i "s;__DA_VARIABLES_OCN__;$DA_VARIABLES_OCN;g" soca_enspert.yaml
    sed -i "s;__DA_VARIABLES_ICE__;$DA_VARIABLES_ICE;g" soca_enspert.yaml
    sed -i "s;__DA_VARIABLES_WAV__;$DA_VARIABLES_WAV;g" soca_enspert.yaml

    export OMP_NUM_THREADS=1
    $MPIRUN ./soca_enspert.x soca_enspert.yaml

    # perform a checkpoint to of each ens member to create the initial restart files
    for ens in $(seq -f "%03g" $DA_ENS_SIZE ); do
        ln -sf Data/ocn.pert.ens.$((10#$ens)).*.PT0S.nc checkpoint_ana.nc
        if [[ "$DA_SEAICE_ENABLED" =~ [yYtT1] ]]; then
           ln -sf Data/ice.pert.ens.$((10#$ens)).*.PT0S.nc ice.checkpoint_ana.nc
        fi
        if [[ "$DA_WAV_ENABLED" =~ [yYtT1] ]]; then
           ln -sf Data/wav.pert.ens.$((10#$ens)).*.PT0S.nc wav.checkpoint_ana.nc
        fi

        ensdir=$BKGRST_ENS_DIR/$ens
        mkdir -p $ensdir

        if [[ "$DA_CHKPT_WITH_MODEL" =~ [yYtT1] ]]; then
           # Use MOM6 to checkpoint
           $MPIRUN ./soca_checkpoint_model.x soca_checkpoint.yaml
        else
           # Simply dump the ocean analysis in the restarts (necessary when restarts are "dynamic_symmetric")
           cp $SOCA_DEFAULT_CFGS_DIR/soca_checkpoint_regional.yaml .
           $SOCA_SCIENCE_BIN_DIR/soca_domom6_action.py checkpoint
        fi

        if [[ "$DA_SEAICE_ENABLED" =~ [yYtT1] ]]; then
           cp -f Data/ice.pert.ens.$((10#$ens)).*.PT0S.nc $ensdir/cice.res.nc
        fi

        if [[ "$DA_WAV_ENABLED" =~ [yYtT1] ]]; then
           cp -f Data/wav.pert.ens.$((10#$ens)).*.PT0S.nc $ensdir/wav.res.nc
        fi

        mv RESTART/* $ensdir/
        for f in $BKGRST_DIR/*; do
            f2=$(basename $f)
            [[ ! -f $ensdir/$f2 ]] && ln -s $f $ensdir/
        done
    done

    exit 0
fi

# 4) all of the above has failed, die a horrible death
echo "ERROR: unable to find a suitable set of ensemble background files"
exit 1
